? = 1 or no occurent
+ = 1 or more occurence
* = 0 or more occurence


<program>                   -> SUGOD <statements>? KATAPUSAN

<statements>                -> NEWLINE* <statement> ((NEWLINE)+ <statement>)* NEWLINE*

<statement>                 -> KEYWORD: IULI <expr>?
                            | KEYWORD: PADAYON
                            | KEYWORD: HUNONG
                            | <print_statement>
                            | <input_statement>
                            | <if-statement>
                            | <for-statement>
                            | <while-statement>
                            | <do-while-statement>
                            | <switch-statement>
                            | <expr>

<if-statement>              -> KEYWORD:KUNG LPAREN <comp-expr> LPAREN
                            <block>
                            (<if-expr-b>|<if-expr-c>?)

<if-statement-b>            -> KEYWORD:KUNG DILI LPAREN <comp-expr> RPAREN
                            <block>
                            (<if-expr-b>|<if-expr-c>?)

<if-statement-c>            -> KEYWORD: KUNG WALA <block>
                            
<for-statement>             -> KEYWORD: ALANG SA (IDENTIFIER | <var-def> | <var-assign> COMMA <comp-expr> COMMA <comp-expr>) block

<while-statement>           -> KEYWORD: SAMTANG(<expr>) <block>

<do-while-statement>        -> KEYWORD: BUHAT <block> SAMTANG(<expr>)

<switch-statement>          -> KEYWORD: BALHIN (expr) { KEYWORD: PANANGLIT COLON }

<print_statement>           -> KEYWORD:IPAKITA COLON <expr> (& <expr>)* 

<input_statement>           -> KEYWORD: DAWAT COLON IDENTIFIER (, IDENTIFIER)*

<expr>                      -> <var-def>
                            | <var-assign>
                            | <concat-expr> ((KEYWORD:AND|KEYWORD:OR) <concat-expr>)*

<var-def>                   -> KEYWORD: MUGNA KEYWORD: <datatype> var-assign

<datatype>                  -> NUMERO | TIPIK | LETRA | PULONG | TINUOD

<var-assign>                -> IDENTIFIER (EQ IDENTIFIER)* (EQ <expr>)? (, (EQ IDENTIFIER)* (EQ <expr>)? )*

<concat-expr>               -> <comp-expr> (& <comp-expr> )*

<comp-expr>                 -> KEYWORD:DILI <comp-expr>
                            | <arith-expr> ((EE|NE|LT|GT|LTE|GTE) <arith-expr>)*
        
<arith-expr>                -> <term> ((PLUS|MINUS) <term>)*

<term>                      -> <factor> ((MUL|DIV|%) <factor>)*

<factor>                    -> (PLUS|MINUS) <factor>
                            | <power> (INCREMENT | DECREMENT)
                            | <power>

<power>                     -> <call> (POW factor)*

<call>                      -> <atom> (LPAREN (<expr> (COMMA <expr>)*)? RPAREN)?

<atom>                      -> <literals>
                            | IDENTIFIER
                            | LPAREN <expr> RPAREN
                            | <list-expr>
                            | <func-def>

<literals>                  -> INT|FLOAT|STRING|BOOL

<list-expr>                 -> LSQUARE (<expr> (COMMA <expr>)*)? RSQUARE


<func-def>                  -> KEYWORD: LIHOK IDENTIFIER LPAREN 
                            (<datatype> IDENTIFIER (COMMA <datatype> IDENTIFIER)*)? 
                            RPAREN (KEYWORD: <datatype>)? <block>

<block>                     -> KEYWORD: PUNDOK LCURLY
                            <statements>
                            RCURLY
